import time    
    
    if "menu" in incoming_msg:
        menu_image_urls = [
        "https://mvjroqqhrgwyaujtwqnm.supabase.co/storage/v1/object/public/menu/menu1.jpg?t=raw", 
        "https://mvjroqqhrgwyaujtwqnm.supabase.co/storage/v1/object/public/menu/menu2.jpg?t=raw",
        "https://mvjroqqhrgwyaujtwqnm.supabase.co/storage/v1/object/public/menu/menu3.jpg?t=raw",
        "https://mvjroqqhrgwyaujtwqnm.supabase.co/storage/v1/object/public/menu/tea.jpg?t=raw"
                ] # ?t=raw forces the Supabase URL to serve the image directly with the proper content type.
                    #"https://drive.google.com/uc?id=1QG9euVD2YNmrpjoFHRAJ9a1C6Ya26Kyx", use gd drive like this for access menu jpg/image
            
        send_whatsapp_message(user, "Here is our menu:")
        for url in menu_image_urls:
            send_whatsapp_message(user, "", image_urls=[url])
            time.sleep(1) ## time delay bcz twilio has limitation on send media 




isinstance()?
It's helpful for type-checking when you want to ensure an object is of a certain class or conforms to a certain type,
 especially when handling different types of objects dynamically. It helps avoid errors and unexpected behaviors.

use **?
Convenience: It allows you to dynamically pass a large number of arguments from a dictionary without manually listing each one.

Flexibility: It's useful when you don't know the exact arguments beforehand or when you have a set of parameters that might change over time.

Clean Code: It avoids repeating long argument lists and keeps the code more readable and concise.





client.messages:

This accesses the messages resource or service within the client object. It represents the messaging service or API for sending SMS, MMS, or other types of messages through the service.

.create():

This is a method that is called to actually create (or send) the message. It‚Äôs usually the action that makes a request to the service's API to send the message. The create() method generally requires parameters like the recipient's phone number, the message content, and other optional settings (like sender ID, media, etc.).







# Initialize Flask App
app = Flask(__name__)
CORS(app)

@app.route('/', methods=['GET', 'POST'])
def bot():
    """Handles incoming WhatsApp messages via Twilio."""
    if request.method == "GET":
        return "Webhook Verified!", 200

    incoming_msg = request.values.get("Body", "").strip().lower()
    user = request.values.get("From", "")
    response = MessagingResponse()
    msg = response.message()
    
    if "menu" in incoming_msg:
        menu_image_urls = [
        "https://mvjroqqhrgwyaujtwqnm.supabase.co/storage/v1/object/public/menu/menu1.jpg?t=raw", 
        "https://mvjroqqhrgwyaujtwqnm.supabase.co/storage/v1/object/public/menu/menu2.jpg?t=raw",
        "https://mvjroqqhrgwyaujtwqnm.supabase.co/storage/v1/object/public/menu/menu3.jpg?t=raw",
        "https://mvjroqqhrgwyaujtwqnm.supabase.co/storage/v1/object/public/menu/tea.jpg?t=raw"
                ] # ?t=raw forces the Supabase URL to serve the image directly with the proper content type.
                    #"https://drive.google.com/uc?id=1QG9euVD2YNmrpjoFHRAJ9a1C6Ya26Kyx", use gd drive like this for access menu jpg/image
            
        send_whatsapp_message(user, "Here is our menu:")
        for url in menu_image_urls:
            send_whatsapp_message(user, "", image_urls=[url])
            time.sleep(1)

    elif "order" in incoming_msg:
        order_details = incoming_msg.replace("order", "").strip()
        msg.body(place_order(user, order_details))
    
    elif "confirm" in incoming_msg:
        msg.body(confirm_order(user))
    
    else:
        msg.body(chatbot_response(incoming_msg))
    
    return str(response)











# Menu image directory
UPLOAD_FOLDER = os.path.join(os.getcwd(), 'static')
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
@app.route('/static/<path:filename>')
def serve_static(filename):
    """for static files."""
    return send_from_directory('static', filename)


# Upload menu images
# @app.route('/upload', methods=['POST'])
# def upload_menu():
#     files = request.files.getlist('menu_files')
#     for file in files:
#         if file:
#             filename = secure_filename(file.filename)
#             file.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))
#     return redirect(url_for('admin_page'))

# Get menu images
# @app.route('/get_menu')
# def get_menu():
#     images = [f"/static/{f}" for f in os.listdir(app.config['UPLOAD_FOLDER'])]
#     return jsonify({'images': images})

# Delete menu image
# @app.route('/delete_menu', methods=['POST'])
# def delete_menu():
#     data = request.get_json()
#     image_path = os.path.join('static', data['image_url'].split('/static/')[-1])
#     if os.path.exists(image_path):
#         os.remove(image_path)
#     return jsonify({'status': 'success'})



# Route to get live orders (for dashboard)
@app.route('/get_orders', methods=['GET'])
def get_orders():
    """Fetch today's live orders."""
    orders = get_all_orders()
    return jsonify({'orders': orders})












not working 
  if "menu" in incoming_msg:
        base_url = "https://c1fd-103-210-29-150.ngrok-free.app/demo/restaurant_chatbot_test/static"
        menu_image_urls = [
            f"{base_url}/menu1.jpg",
            f"{base_url}/menu2.jpg",
            f"{base_url}/menu3.jpg",
            f"{base_url}/tea.jpg"
        ]

        send_whatsapp_message(user, "Here is our menu:")
        










1. cv2.imwrite(output_path, img, [...])
This writes (saves) the image img to the specified output_path.

The image format is determined by the file extension (e.g., .jpg, .png).

2. [cv2.IMWRITE_JPEG_QUALITY, quality]
This controls the compression level for JPEG images.

cv2.IMWRITE_JPEG_QUALITY is an OpenCV flag used to specify the quality of the saved image.

quality:

Ranges from 0 to 100.

100 ‚Üí Best quality (large file size).

0 ‚Üí Lowest quality (small file size).

Why Use This?
Twilio has file size limits, and screenshots can be large.

Reducing quality helps send images over WhatsApp without hitting size restrictions.





                const url = date ? `/get_orders_by_date?date=${date}` : "/get_today_orders";



pattern = r"(\d+)\s*(full\s*plate|half\s*plate|full|half|plate|ml|l)?\s*(\d+)"
This pattern is used to extract order details like quantity, unit (full/half/plate/ml etc.), and item code from user messages.

üîç Regex Breakdown:
(\d+)
Matches any number (1 or more digits).

This represents the quantity (e.g., 2, 500, etc.)

\s*
Matches optional whitespace (zero or more spaces).

Allows flexible spacing between quantity and unit (e.g., 2full, 2 full)

(full\s*plate|half\s*plate|full|half|plate|ml|l)?
Matches units of quantity like:

"full plate" ‚úÖ

"halfplate" ‚úÖ

"ml", "l" ‚úÖ

It also handles spacing in "full plate" or "half plate"

The ? at the end makes this optional (in case no unit is specified).

\s*
Again allows optional spacing before the item code.

(\d+)
Matches the item code (e.g., 509, 302, etc.)

‚úÖ Example Matches:
Input: "2full 509"
‚Üí ('2', 'full', '509')

Input: "2 full plate 502"
‚Üí ('2', 'full plate', '502')

Input: "500ml 406"
‚Üí ('500', 'ml', '406')

Input: "2 501"
‚Üí ('2', None, '501') (no unit, defaults to "piece")



‚úÖ Supported Order Formats:
Order Text	Expected Match	Status
2full 509	Qty: 2, Unit: full, Code: 509	‚úÖ
500ml 406	Qty: 500, Unit: ml, Code: 406	‚úÖ
2 full plate 502	Qty: 2, Unit: full plate, Code: 502	‚úÖ
1 halfplate 601	Qty: 1, Unit: half plate, Code: 601	‚úÖ
2 501	Qty: 2, Unit: None (default), Code: 501	‚úÖ
2 fullplate 303	Qty: 2, Unit: full plate, Code: 303	‚úÖ
1 plate 502	Qty: 1, Unit: plate, Code: 502	‚úÖ
1 l 605	Qty: 1, Unit: l (litre), Code: 605	‚úÖ
‚ùå NOT Handled:
But here are a few edge cases that might not work perfectly:

Order with no spacing at all like:

"2full509" ‚Üê Won't match properly

"500ml406" ‚Üê Won‚Äôt match

Wrong sequences like:

"509 2full" ‚Üê Wrong order (item code first) ‚Üí ‚ùå Not supported

"502 full plate 2" ‚Üê Unit before quantity ‚Üí ‚ùå Not supported

Misspelled unit formats:

"fullplate" is handled ‚úÖ

But "fulplate" or "flplate" ‚Üí ‚ùå No match


pattern = r"(\d+)\s*(full\s*plate|half\s*plate|full|half|plate|ml|l)?\s*(\d{3})"
üîç Explanation:

Part	Meaning
(\d+)	Captures the quantity (any number)
\s*	Allows for optional spacing between parts
(unit options)?	Matches optional unit types like full, ml, plate, etc.
\s*	Allows for more optional spaces
(\d{3})	Matches 3-digit item code (you can change {3} to + if flexible)
‚úÖ Now this will match:
"2full301"

"2 full plate 301"

"500ml 406"

"2 fullplate 301"

"2 301" (no unit)

"1l605"